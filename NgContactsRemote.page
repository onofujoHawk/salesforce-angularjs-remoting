<!--
    AngularJS promises - Visualforce custom page
-->
<apex:page showHeader="false" 
           sidebar="false" 
           standardStylesheets="false"
           controller="NgContactsRemoteCtrl"
           applyHtmlTag="true"
           applyBodyTag="true"
           docType="html-5.0" 
           cache="true">

    <!-- Static Resources -->
    <apex:includeScript value="{!$Resource.JQuery_3_1_0}"/>
    <apex:includeScript value="{!$Resource.AngularJS_1_5_8}"/>
    <apex:includeScript value="{!$Resource.UI_Bootstrap_0_10_0}"/>
    <apex:includeScript value="{!$Resource.NgBlock_UI_JS}"/>
    <apex:includeScript value="{!$Resource.Tether_JS_min}"/>
    <apex:includeScript value="{!$Resource.Bootstrap_JS_4_0}"/>
    <apex:stylesheet value="{!$Resource.NgBlock_UI_CSS}"/>
    <apex:stylesheet value="{!$Resource.Bootstrap_CSS_4_0}"/>
    <apex:stylesheet value="{!$Resource.Font_Awesome_2_0}"/>
    <apex:stylesheet value="{!$Resource.Custom_NgRemote}"/>

    <!-- HTML5 starts here -->
    <html lang="en-US" xmlns:ng="http://angularjs.org">
    <head>
        <meta charset="UTF-8" />
        <meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1" />
        <meta content='width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=0' name='viewport' />
        <meta name="viewport" content="width=device-width" />
        <title>SFDC Contacts</title>

        <!-- Stylesheet -->
        <style type="text/css">
            @import url('https://fonts.googleapis.com/css?family=Signika+Negative');
            .testo {
                font-family: 'Signika Negative', sans-serif !important;
            }
            /*.vcenter {
                display: inline-block !important;
                vertical-align: middle !important;
                float: none !important;
            }*/
        </style>

    </head>
    <body class="ng-cloak" ng-app="ContactApp">

        <!-- Wrap all page content here -->
        <section id="Wrap">


            <!-- AngularJS controller starts here -->
            <div ng-controller="ContactCtrl" class="container">
                <!-- Header -->
                <div class="page-header">
                    <h1>SFDC App.&nbsp;&nbsp;<apex:image id="logo" value="{!$Resource.sfdc_logo}" 
                    width="100" height="65"/></h1>
                </div>

                <!-- Modal -->
                <div id="Modal" class="modal fade" role="dialog" tabindex="-1" 
                aria-labelledby="ModalLabel" aria-hidden="true">
                    <div class="modal-dialog" role="document">
                        <div class="modal-content">
                            <div class="modal-header">
                                <h4 class="modal-title" id="ModalLabel">Well done!</h4>
                                <button type="button" class="close" data-dismiss="modal" aria-hidden="true">
                                    <span class="glyphicon glyphicon-remove" aria-hidden="true"></span>
                                </button>
                            </div>
                            <div class="modal-body">
                                <p>You successfully saved a new Contact.</p>
                            </div>
                            <div class="modal-footer">
                                <button type="button" class="btn btn-success" data-dismiss="modal">Close</button>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Modal - the Angular way -->
                <!--<script type="text/ng-template" id="myModal.html">
                    <div class="modal-header">
                        <h3 class="modal-title" id="modal-title">Well done!</h3>
                    </div>
                    <div class="modal-body">
                        <p>You successfully saved a new Contact.</p>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-success" 
                        data-dismiss="modal" ng-click="close()">Close</button>
                    </div>
                    </div>
                </script>-->
                
                <!-- Edit modal -->
                <div class="modal fade" id="edit" tabindex="-1" role="dialog" aria-labelledby="edit" 
                aria-hidden="true">
                    <div class="modal-dialog">
                        <div class="modal-content">
                            <div class="modal-header">
                                <h4 class="modal-title custom_align" id="Heading">Edit this Contact</h4>
                                <button type="button" class="close" data-dismiss="modal" aria-hidden="true">
                                    <span class="glyphicon glyphicon-remove" aria-hidden="true"></span>
                                </button>
                            </div>
                            <div class="modal-body">

                                <form id="UpdateForm" 
                                 role="form" 
                                 novalidate="true" 
                                 name="EditForm" 
                                 autocomplete="off" 
                                 ng-submit="updateRow($event)">

                                    <!-- Edit first name -->
                                    <div class="form-group" ng-class="{ 'has-danger': EditForm.editFirstName.$invalid && !EditForm.editFirstName.$pristine }">
                                        <label for="First">First Name: </label>
                                        <input class="form-control" type="text" placeholder="{{ formData.FirstName }}" autocomplete="off" ng-model="contacts.firstName" required="false" name="editFirstName" id="First" ng-minlength="3"/>
                                        <small ng-show="EditForm.editFirstName.$error.minlength" class="msg-error">First Name is too short.</small>
                                    </div>

                                    <!-- Edit last name -->
                                    <div class="form-group" ng-class="{ 'has-danger': EditForm.editLastName.$invalid && !EditForm.editLastName.$pristine }">
                                        <label for="Last">Last Name: </label>
                                        <input class="form-control" type="text" placeholder="{{ formData.LastName }}" autocomplete="off" ng-model="contacts.lastName" required="false" id="Last"
                                        name="editLastName" ng-minlength="3"/>
                                        <small ng-show="EditForm.editLastName.$error.minlength" class="msg-error">First Name is too short.</small>
                                    </div>

                                    <!-- Edit email -->
                                    <div class="form-group" ng-class="{ 'has-danger': EditForm.editEmail.$invalid && !EditForm.editEmail.$pristine }">
                                        <label for="Emails">Email: </label>
                                        <input class="form-control" type="email" placeholder="{{ formData.Email }}" autocomplete="off" ng-model="contacts.email" required="false" id="Emails" 
                                        name="editEmail"/>
                                        <small ng-show="EditForm.editEmail.$invalid && !EditForm.editEmail.$pristine" class="msg-error" id="EmailInvalid">Enter a valid email.</small>
                                    </div>

                                    <!-- Edit phone -->
                                    <div class="form-group" ng-class="{ 'has-danger': EditForm.editPhone.$invalid && !EditForm.editPhone.$pristine }">
                                        <label for="PhoneNum">Phone: </label>
                                        <input 
                                        class="form-control" 
                                        type="text" 
                                        placeholder="{{ formData.Phone }}" 
                                        autocomplete="off" 
                                        ng-model="contacts.phone" 
                                        required="false" 
                                        ng-minlength="10"
                                        ng-maxlength="10" 
                                        ng-pattern="phoneNumberPattern" 
                                        name="editPhone" 
                                        id="PhoneNum" />
                                        <small class="msg-error" ng-show="EditForm.editPhone.$error.pattern"> 
                                        Enter a valid phone number.</small>
                                        <br 
                                        ng-show="(EditForm.editPhone.$error.minlength || EditForm.editPhone.$error.maxlength) && EditForm.editPhone.$dirty" />
                                        <small ng-show="(EditForm.editPhone.$error.minlength || EditForm.editPhone.$error.maxlength) && EditForm.editPhone.$dirty" class="msg-error" id="PhoneMinMax">Phone number should be 10 digits.</small>
                                    </div>

                                    <!-- Edit department -->
                                    <div class="form-group" ng-class="{ 'has-danger': EditForm.editDepartment.$invalid && !EditForm.editDepartment.$pristine }">
                                        <label for="Dept">Department: </label>
                                        <input class="form-control" type="text" placeholder="{{ formData.Department }}" autocomplete="false" ng-model="contacts.department" required="false" id="Dept" name="editDepartment"/>
                                    </div>
                                </form>
                            </div>
                            <div class="modal-footer">
                                <button type="button" class="btn btn-warning btn-lg" style="width: 100%;">
                                    <span class="glyphicon glyphicon-ok-sign"></span> Update
                                </button>
                            </div>
                        </div>
                    <!-- /.modal-content --> 
                    </div>
                <!-- /.modal-dialog --> 
                </div>
                
                <!-- Deletion modal -->
                <div class="modal fade" id="delete" tabindex="-1" role="dialog" aria-labelledby="edit" 
                aria-hidden="true">
                    <div class="modal-dialog">
                        <div class="modal-content">
                            <div class="modal-header">
                                <h4 class="modal-title custom_align" id="Heading">Wait a second!</h4>
                                <button type="button" class="close" data-dismiss="modal" aria-hidden="true"><span class="glyphicon glyphicon-remove" aria-hidden="true"></span></button>
                            </div>
                            <div class="modal-body">
                   
                                <div class="alert alert-danger"><span class="glyphicon glyphicon-warning-sign">
                                    </span>&nbsp; Are you sure you want to delete this Record?
                                </div>
                   
                            </div>
                            <div class="modal-footer ">
                                <button type="button" class="btn btn-success" ng-click="remove($event)"><span class="glyphicon glyphicon-ok-sign"></span> Yes
                                </button>
                                <button type="button" class="btn btn-default" data-dismiss="modal"><span class="glyphicon glyphicon-remove"></span> No
                                </button>
                            </div>  
                        </div>
                    <!-- /.modal-content --> 
                    </div>
                <!-- /.modal-dialog --> 
                </div>

                <!-- Success alert -->
                <div class="alert alert-success alert-dismissable custom-alert" role="alert" ng-show="success">
                    <button type="button" class="close" data-dismiss="alert" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                    <strong>Well done!</strong> You successfully saved a new Contact.
                </div>

                <!-- Error alert -->
                <div class="alert alert-danger alert-dismissable custom-alert" role="alert" ng-show="danger">
                    <button type="button" class="close" data-dismiss="alert" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                    <strong>Oops!</strong> Something went wrong while saving the Contact.
                </div>

                <!-- Table panel -->
                <div class="col-md-12 col-md-offset-1">
                    <div class="panel panel-default panel-table">
                        <!-- HEADING -->
                        <div class="panel-heading">
                            <div class="row">
                                <div class="col col-xs-6">
                                    <h3 class="panel-title">Contacts</h3>
                                </div>
                                <div class="col col-xs-6 pull-right form-group">
                                    <!-- search a contact -->
                                    <input type="text" ng-model="criteria" ng-change="search()" id="Filter" 
                                    ng-keyup="fetchByFilter($event)" placeholder="Search..."
                                    class="form-control"/>
                                </div>
                            </div>
                        </div>
                        <!-- BODY -->
                        <div class="panel-body">

                            <!--<input type="text" ng-model="mcm.searchText" 
                            id="Filter" ng-keyup="fetchByFilter($event)"/>-->
                            
                            <!-- display the contacts -->
                            <table class="table 
                                table-striped 
                                table-condensed 
                                table-list">
                                <thead class="thead-inverse">
                                    <tr>
                                        <th>#</th>
                                        <th class="name">Name &nbsp;<a ng-click="sort_by('name')"><i class="icon-sort"></i></a></th>
                                        <th class="email">Email &nbsp;<a ng-click="sort_by('email')"><i class="icon-sort"></i></a>
                                        </th>
                                        <th class="phone">Phone &nbsp;<a ng-click="sort_by('phone')"><i class="icon-sort"></i></a>
                                        </th>
                                        <th class="dept">Department &nbsp;<a ng-click="sort_by('dept')"><i class="icon-sort"></i>
                                        </a></th>
                                        <th>Edit</th>
                                        <th>Delete</th>
                                    </tr>
                                </thead>
                                <tbody>

                                    <!-- <tr ng-show="ContactData.length != 0" ng-repeat="contact in ContactData | filter: query track by $index"> -->

                                    <tr ng-show="pagedItems.length != 0" ng-repeat="item in pagedItems[currentPage] | orderBy:sortingOrder:reverse track by $index">
                                        <td>{{ $index + 1 }}</td>
                                        <td>{{ item.Name }}</td>
                                        <td>{{ item.Email }}</td>
                                        <td>{{ item.Phone }}</td>
                                        <td>{{ item.Department }}</td>
                                        <td>
                                            <p>
                                                <button class="btn btn-outline-primary btn-xs" data-title="Edit" data-toggle="modal" data-target="#edit" ng-click="fnClick(item, $index)">
                                                    <small><span class="glyphicon glyphicon-pencil"></span></small>
                                                </button>
                                            </p>
                                        </td>
                                        <td>
                                            <p>
                                                <button class="btn btn-outline-danger btn-xs" data-title="Delete" data-toggle="modal" data-target="#delete" ng-click="fnClick(item, $index)">
                                                    <small><span class="glyphicon glyphicon-trash"></span></small>
                                                </button>
                                            </p>
                                        </td>
                                    </tr>
                                </tbody>
                            </table>

                            <div ng-show="pagedItems.length == 0">
                                No data.                
                            </div>

                        </div>
                        <!-- FOOTER -->
                        <div class="panel-footer" ng-hide="pagedItems.length == 0">
                            <div class="row">
                                <div id="Page" class="col col-xs-6">
                                    Page {{ currentPage+1 }} of {{ pagedItems.length }}
                                </div>
                                <div class="col col-xs-6">
                                    <!-- Pagination -->
                                    <div id="Paginator">
                                        <ul class="pagination pagination-large pull-right">
                                            <li class="page-item" ng-class="{disabled: currentPage == 0}">
                                                <a class="page-link visible-xs" ng-click="prevPage()">
                                                    <span class="glyphicon glyphicon-chevron-left">
                                                    </span>
                                                </a>
                                            </li>
                                            <li ng-repeat="n in range(pagedItems.length)"
                                            ng-class="{active: n == currentPage}"
                                            ng-click="setPage()" class="page-item">
                                                <a class="page-link" ng-bind="n + 1">1</a>
                                            </li>
                                            <li class="page-item" 
                                            ng-class="{disabled: currentPage == pagedItems.length - 1}">
                                                <a class="page-link visible-xs" ng-click="nextPage()">
                                                    <span class="glyphicon glyphicon-chevron-right">
                                                    </span>
                                                </a>
                                            </li>
                                        </ul>
                                    </div>
                                </div>
                                <!-- end paginator -->
                            </div>
                            <!-- end row -->
                        </div>
                        <!-- end panel footer -->
                    </div>
                    <!-- end panel table -->
                </div>
                <!-- end offset panel -->
                <br/>

                <!-- form panel -->
                <form id="RegForm"
                name="Registration" 
                novalidate="novalidate" 
                autocomplete="off"
                style="padding-top: 60px;"
                ng-submit="addRow($event)">

                    <!-- First Name -->
                    <div class="form-group col-md-6 col-xs-12" 
                    ng-class="{ 'has-danger': Registration.firstName.$invalid && !Registration.firstName.$pristine }">
                        <label for="FirstName">First Name: </label>
                        <input id="FirstName" name="firstName" type="text" ng-model="contacts.firstName" 
                        class="form-control" ng-minlength="3" aria-describedby="firstHelp" required="true" 
                        autocomplete="off" />
                        <small id="firstHelp" class="form-text text-muted" ng-hide="Registration.firstName.$invalid && !Registration.firstName.$pristine">
                        Example: John, Jane, Mike, Lucy, etc.</small>
                        <small ng-show="Registration.firstName.$invalid && !Registration.firstName.$pristine" 
                        class="msg-error" id="FirstNameInvalid">First Name is required.</small><br 
                        ng-show="Registration.firstName.$error.minlength"/>
                        <small ng-show="Registration.firstName.$error.minlength" 
                        class="msg-error" id="FirstNameMin">First Name is too short.</small>
                    </div>

                    <!-- Last Name -->
                    <div class="form-group col-md-6 col-xs-12" 
                    ng-class="{ 'has-danger': Registration.lastName.$invalid && !Registration.lastName.$pristine }">
                        <label for="LastName">Last Name: </label>
                        <input id="LastName" name="lastName" type="text" ng-model="contacts.lastName" 
                        class="form-control" aria-describedby="firstHelp" required="true" autocomplete="off" />
                        <small id="firstHelp" class="form-text text-muted" ng-hide="Registration.lastName.$invalid && !Registration.lastName.$pristine">
                        Example: Smith, Douglas, Palthrow, Williams, etc.</small>
                        <small ng-show="Registration.lastName.$invalid && !Registration.lastName.$pristine" 
                        class="msg-error" id="LastNameInvalid">Last Name is required.</small><br 
                        ng-show="Registration.lastName.$error.minlength"/>
                        <small ng-show="Registration.lastName.$error.minlength" 
                        class="msg-error" id="LastNameMin">Last Name is too short.</small>
                    </div>

                    <!-- Email -->
                    <div class="form-group col-md-6 col-xs-12" 
                    ng-class="{ 'has-danger': Registration.email.$invalid && !Registration.email.$pristine }">
                        <label for="Email">Email: </label>
                        <input id="Email" name="email" type="email" ng-model="contacts.email" class="form-control" 
                        aria-describedby="emailHelp" required="true" autocomplete="off"/>
                        <small id="emailHelp" class="form-text text-muted" ng-hide="Registration.email.$invalid && !Registration.email.$pristine">
                        Example: first.last@example.com, hello@world.net, etc.</small>
                        <small ng-show="Registration.email.$invalid && !Registration.email.$pristine" 
                        class="msg-error" id="EmailInvalid">Enter a valid email.</small>
                    </div>

                    <!-- Phone -->
                    <div class="form-group col-md-6 col-xs-12" 
                    ng-class="{ 'has-danger': Registration.phone.$error.number && Registration.phone.$invalid }">
                        <label for="Phone">Phone: </label>
                        <input id="Phone" type="text" name="phone" ng-model="contacts.phone" class="form-control" ng-minlength="10" ng-maxlength="10" ng-pattern="phoneNumberPattern"
                        aria-describedby="phoneHelp" autocomplete="off"/>
                        <small id="phoneHelp" class="form-text text-muted" ng-hide="Registration.phone.$invalid">Example: +91-036-78658</small>
                        <small class="msg-error" ng-show="Registration.phone.$error.pattern" id="PhonePattern">
                        Enter a valid phone number.</small><br ng-show="(Registration.phone.$error.minlength || Registration.phone.$error.maxlength) && Registration.phone.$dirty"/>
                        <small ng-show="(Registration.phone.$error.minlength || Registration.phone.$error.maxlength) && Registration.phone.$dirty" class="msg-error" id="PhoneMinMax">
                        Phone number should be 10 digits.</small>
                    </div>

                    <!-- Department -->
                    <div class="form-group col-md-6 col-xs-12" 
                    ng-class="{ 'has-danger': Registration.department.$invalid && !Registration.department.$pristine }">
                        <label for="Department">Department: </label>
                        <input id="Department" type="text" ng-model="contacts.department" class="form-control" 
                        aria-describedby="deptHelp" required="true" name="department" autocomplete="off"/>
                        <small id="deptHelp" class="form-text text-muted" ng-hide="Registration.department.$invalid && !Registration.department.$pristine">
                        Example: R&amp;D, QA, CM, Back Office, etc.</small>
                        <small ng-show="Registration.department.$invalid && !Registration.department.$pristine"
                        class="msg-error" id="DeptInvalid">Department name is required.</small>
                    </div>

                    <div class="col-md-6 col-xs-12">
                        <!-- Submit Button -->
                        <button type="submit" ng-class="{'btn btn-danger': Registration.$invalid, 
                        'btn btn-primary': !Registration.$invalid }" ng-disabled="Registration.$invalid" id="Save">
                        <span class="glyphicon glyphicon-ok-sign"></span> Save Contact</button>
                    </div>

                </form>

            </div>


        </section><!-- Wrap end -->

        <!-- Footer -->
        <footer id="Footer">
            <div class="container">
                <div class="row text-center">
                    <div class="col-md-12 col-xs-12">
                        <ul class="list-inline">
                            <li class="list-inline-item">
                                <a href="https://www.facebook.com/onofwest">
                                <i class="fa fa-facebook fa-2x"></i></a>
                            </li>
                            <li class="list-inline-item">
                                <a href="https://www.dropbox.com/home">
                                <i class="fa fa-dropbox fa-2x"></i></a>
                            </li>
                            <li class="list-inline-item">
                                <a href="https://github.com/onofujoHawk/">
                                <i class="fa fa-github fa-2x"></i></a>
                            </li>
                            <li class="list-inline-item">
                                <a href="https://www.linkedin.com/in/onofrio-falco-009932102/">
                                <i class="fa fa-linkedin fa-2x"></i></a>
                            </li>
                            <li class="list-inline-item">
                                <a href="https://plus.google.com/u/0/103875186566707860709">
                                <i class="fa fa-google-plus fa-2x"></i></a>
                            </li>
                        </ul>
                    </div>
                </div>
                <div class="row text-center">  
                    <div class="col-md-12 col-xs-12"> 
                        <ul class="menu list-inline">
                            <li class="list-inline-item">
                                <apex:outputLink value="{!goToHomepage}" target="_parent">Home</apex:outputLink>
                            </li>
                            <li class="list-inline-item">
                                <apex:outputLink value="{!goToContacts}" target="_parent">Contacts</apex:outputLink>
                            </li>
                            <li class="list-inline-item">
                                <apex:outputLink value="{!goToAccounts}" target="_parent">Accounts</apex:outputLink>
                            </li>
                        </ul>
                    </div>
                 </div>    

                <!-- <div class="credits">
                    <p>SFDC App ©2017, All Rights Reserved.
                        <br/>
                        <span><a href="https://www.linkedin.com/in/onofrio-falco-009932102/" 
                        style="color: White;">Onofrio Falco</a>&nbsp;<i class="fa fa-linkedin-square" aria-hidden="true"></i></span>
                    </p>
                </div> -->

            </div>
        </footer>
    
        <div class="copyright">
            <div class="container">
                <div class="text-center">
                    <p class="testo">SFDC App ©2017, All rights reserved.</p>
                </div>
            </div>
        </div>



    </body>
    <!-- AngularJS layer -->
    <script type="text/javascript">

        'use strict';
        var app = angular.module('ContactApp', ['ui.bootstrap']);

        /**
         * Main app factory method
         */
        app.factory('VFRemotingFactory', function($q, $rootScope) {
            var factory = {};
            factory.getByFilter = function(searchText) {
                var deferred = $q.defer();
                getByFilterCallback(function(result) {
                    $rootScope.$apply(function() {
                        deferred.resolve(result);
                    });
                }, searchText);
                return deferred.promise;
            };
            factory.saveAndGet = function(contact) {
                var deferred = $q.defer();
                saveAndGetCallback(function(result) {
                    $rootScope.$apply(function() {
                        deferred.resolve(result);
                    });
                }, contact);
                return deferred.promise;
            };
            factory.deleteById = function(id) {
                var deferred = $q.defer();
                deleteByIdCallback(function(result) {
                    $rootScope.$apply(function() {
                        deferred.resolve(result);
                    });
                }, id);
                return deferred.promise;
            };
            factory.merge = function(contact) {
                var deferred = $q.defer();
                mergeCallback(function(result) {
                    $rootScope.$apply(function() {
                        deferred.resolve(result);
                    });
                }, contact);
                return deferred.promise;
            }
            return factory;
        });

        /**
         * Main app Controller
         */
        var ctrl = app.controller('ContactCtrl', ['$rootScope', '$scope', '$q', '$log', '$filter', 'VFRemotingFactory', function($rootScope, $scope, $q, $log, $filter, VFRemotingFactory) {

            //Controller structured members
            $scope.contacts = {};
            $scope.pagedItems = [];
            $scope.filteredItems = [];
            $scope.groupedItems = [];

            //Controller default members
            $scope.itemsPerPage = 10;
            $scope.query = '';
            $scope.currentPage = 0;
            $scope.reverse = false;
            $scope.sortingOrder = sortingOrder;

            //get Contacts as JSON
            $scope.ContactData = JSON.parse('{!JSENCODE(contactListJSON)}');

            //build Contact fullname
            $scope.fullName = function(firstName, lastName) {
                $log.info(firstName + ' ' + lastName);
                return firstName + ' ' + lastName;
            };

            //get Contact by Criteria
            $scope.fetchByFilter = function($event) {
                $log.info('Get contact filtered');
                if ($scope.criteria.length > 1) {
                    var searchTxt = $scope.criteria;
                    VFRemotingFactory.getByFilter(searchTxt)
                        .then(function(result) {
                            delete $scope.ContactData;
                            $scope.ContactData = result;
                        });
                } else {
                    var searchTxt = $scope.criteria;
                    VFRemotingFactory.getByFilter()
                        .then(function(result) {
                            delete $scope.ContactData;
                            $scope.ContactData = result;
                        });
                }
            };    

            //Reset the form after insertion
            $scope.reset = function() {
                $log.warn('Deleting submitted contact');
                delete $scope.contacts.firstName;
                delete $scope.contacts.lastName;
                delete $scope.contacts.email;
                delete $scope.contacts.department;
                delete $scope.contacts.phone;
                $scope.Registration.$setPristine(true);
            };

            //Add a row to the table
            $scope.addRow = function($event) {
                $log.info('Save and get');
                var contactJS = new Contact();
                contactJS.firstName = $scope.contacts.firstName;
                contactJS.lastName = $scope.contacts.lastName;
                contactJS.email = $scope.contacts.email;
                contactJS.department = $scope.contacts.department;
                contactJS.phone = $scope.contacts.phone;
                contactJS.name = $scope.fullName($scope.contacts.firstName, $scope.contacts.lastName);
                VFRemotingFactory.saveAndGet(contactJS)
                    .then(function(result) {
                        $scope.ContactData = JSON.parse(result);
                        $scope.messages = true;
                        if ($scope.messages) {
                            $log.log('Success insert');
                            $scope.success = true;
                            //Show success modal after submitting the form
                            jq("form").on('submit', function() {
                                jq(".modal-header").addClass('header-success');
                                jq('#Modal').modal('show');
                            });
                        } else {
                            $log.log('Error');
                            $scope.danger = true;
                            //Show danger modal after submitting the form
                            jq("form").on('submit', function() {
                                jq(".modal-header").addClass('header-danger');
                                jq('#Modal').modal('show');
                            });
                        }
                    });
                $scope.reset();
            };

            $scope.updateRow = function($event) {
                $log.info('Update');
                var contactJS = new Contact();
                var copy = angular.copy($scope.formData);
                if ($scope.contacts.firstName !== null) {
                    contactJS.firstName = $scope.contacts.firstName;
                }
                if ($scope.contacts.lastName !== null) {
                    contactJS.lastName = $scope.contacts.lastName;
                }
                if ($scope.contacts.email !== null) {
                    contactJS.email = $scope.contacts.email;
                }
                if ($scope.contacts.phone !== null) {
                    contactJS.phone = $scope.contacts.phone;
                }
                if ($scope.contacts.department !== null) {
                    contactJS.department = $scope.contacts.department;
                }
                if ($scope.contacts.firstName !== null && $scope.contacts.lastName !== null) {
                    var first = $scope.contacts.firstName;
                    var last = $scope.contacts.lastName;
                    contactJS.name = $scope.fullName(first, last);
                }
                console.log('Contact to update ' + contactJS);
                if (!isEmpty(contactJS) && !equals(contactJS, $scope.formData)) {
                    VFRemotingFactory.merge(contactJS)
                        .then(function(result) {
                            $log.info('Success update');
                            delete $scope.ContactData;
                            $scope.ContactData = result;
                        });
                    //Close modal after async call
                    hideModal('#update');
                } else {
                    $log.warn('ID is empty');
                }
            }

            $scope.remove = function($event) {
                $log.info(''+JSON.stringify($scope.formData));
                var contactID = $scope.formData.Id;
                $scope.CopyData = angular.copy($scope.ContactData);
                if (contactID !== undefined) {
                    VFRemotingFactory.deleteById(contactID)
                        .then(function(result) {
                            $log.info('Success delete');
                            delete $scope.ContactData;
                            $scope.ContactData = result;
                        });
                    //Close modal after async call
                    hideModal('#delete');
                } else {
                    $log.warn('ID is empty');
                }
            }

            function Contact() {
                this.firstName = null,
                this.lastName = null,
                this.email = null,
                this.department = null,
                this.phone = null,
                this.name = null
            }

            //Phone number pattern
            $scope.phoneNumberPattern = (function() {
                var regexp = /^\(?(\d{3})\)?[ .-]?(\d{3})[ .-]?(\d{4})$/;
                return {
                    test: function(value) {
                        if( $scope.requireTel === false ) {
                            return true;
                        }
                        return regexp.test(value);
                    }
                };
            })();
            
            $scope.fnClick = function(usr, index) { 
                $scope.formData = angular.copy($scope.pagedItems[$scope.currentPage][index]);   
                console.log('Selected row', JSON.stringify($scope.formData.Name));
                //Set index
                $scope.formData.Index = index;
                var fullname = $scope.formData.Name.split(" ");
                //Build first and last names
                $scope.formData.FirstName = fullname[0];
                $scope.formData.LastName = fullname[1];
            }

            var searchMatch = function(haystack, needle) {
                if (!needle) {
                    return true;
                }
                return haystack.toLowerCase().indexOf(needle.toLowerCase()) !== -1;
            };
            
            //Initialize the Search Filters 
            $scope.search = function() {
                $scope.filteredItems = $filter('filter')($scope.ContactData, function(item) {
                    for (var attr in item) {
                        if (searchMatch(item[attr], $scope.query))
                            return true;
                    }
                    return false;
                });
                // Define Sorting Order
                if ($scope.sortingOrder !== '') {
                    $scope.filteredItems = $filter('orderBy')($scope.filteredItems, 
                        $scope.sortingOrder, 
                        $scope.reverse);
                }
                $scope.currentPage = 0;
                
                // Group by pages
                $scope.groupToPages();
            };
            
            // Calculate Total Number of Pages based on Records Queried 
            $scope.groupToPages = function() {
                $scope.pagedItems = [];
                for (var i=0; i<$scope.filteredItems.length; i++) {
                    if (i % $scope.itemsPerPage === 0) {
                        $scope.pagedItems[Math.floor(i / $scope.itemsPerPage)] = [$scope.filteredItems[i]];
                    } else {
                        $scope.pagedItems[Math.floor(i / $scope.itemsPerPage)].push($scope.filteredItems[i]);
                    }
                }
            };
            
            $scope.range = function(start, end) {
                var ret = [];
                if (!end) {
                    end = start;
                    start = 0;
                }
                for (var i=start; i<end; i++) {
                    ret.push(i);
                }
                return ret;
            };
            
            $scope.prevPage = function() {
                if ($scope.currentPage > 0) {
                    $scope.currentPage--;
                }
            };
            
            $scope.nextPage = function() {
                if ($scope.currentPage < $scope.pagedItems.length - 1) {
                    $scope.currentPage++;
                }
            };
            $scope.setPage = function() {
                $scope.currentPage = this.n;
            };

            // functions have been describe process the data for display
            $scope.search();
            
            // change sorting order
            $scope.sort_by = function(newSortingOrder) {
                console.log('Sorting');
                if ($scope.sortingOrder == newSortingOrder) {
                    $scope.reverse = !$scope.reverse;
                }
                $scope.sortingOrder = newSortingOrder;
                
                // icon setup
                jq('th i').each(function() {
                    // icon reset
                    jq(this).removeClass().addClass('icon-sort');
                });
                if ($scope.reverse)
                    jq('th.' + newSortingOrder + ' i').removeClass().addClass('icon-chevron-up');
                else
                    jq('th.' + newSortingOrder + ' i').removeClass().addClass('icon-chevron-down');
            };

            //Set css property dynamically
            $scope.$watch('pagedItems', function() {
                if ($scope.pagedItems.length == 0) {
                    jq("#Paginator").css('padding-top', '12px');
                }
            });
            


        }]);

        /**
         * SFDC Remote action callbacks
         */
        function getByFilterCallback(callback, searchText) {
            if (searchText == undefined) {
                searchText = '';
            }
            Visualforce.remoting.Manager.invokeAction(
                '{!$RemoteAction.NgContactsRemoteCtrl.getAllByFilter}',
                searchText,
                callback, {
                    escape: false,
                    timeout: 120000
                }
            );
        };

        function saveAndGetCallback(callback, contact) {
            if (contact !== undefined) {
                Visualforce.remoting.Manager.invokeAction(
                    '{!$RemoteAction.NgContactsRemoteCtrl.saveAndGetAll}',
                    contact,
                    callback, {
                        escape: false,
                        timeout: 120000
                    }
                );
            }
        };

        function deleteByIdCallback(callback, id) {
            if (id !== undefined && typeof id === 'string') {   
                Visualforce.remoting.Manager.invokeAction(
                    '{!$RemoteAction.NgContactsRemoteCtrl.deleteById}',
                    id,
                    callback, {
                        escape: false,
                        timeout: 120000
                    }
                );
            }
        };

        function mergeCallback(callback, contact) {
            if (typeof contact === 'object') {
                contact = JSON.stringify(contact);
            }
            Visualforce.remoting.Manager.invokeAction(
                '{!$RemoteAction.NgContactsRemoteCtrl.updateContact}',
                contact,
                callback, {
                    escape: false,
                    timeout: 120000
                }
            );
        };

    </script>
    <!-- JavaScript layer -->
    <script type="text/javascript">

        var jq = jQuery.noConflict();
        var sortingOrder = 'name';
        var $window = jq(window);

        /**
         * Set tooltip placement dynamically
         */
        setPlacement = function() {
            if ($window.width() > 514)
                return 'right';
            else
                return 'top';
        };

        /**
         * Hide page numbers
         */
        hidePagination = function(sfId) {
            if ($window.width() < 514) {
                document.getElementById(sfId).style.display = 'none';
            } else {
                document.getElementById(sfId).style.display = 'block';
            }
        }
        
        /**
         * Close modal 
         */
        hideModal = function(sfId) {
            if (sfId.length !== 0) {
                if (!sfId.startsWith('#') && !sfId.startsWith(".")) {
                    sfId = "#" + sfId;
                }
                if (!sfId.startsWith(".") && !sfId.startsWith("#")) {
                    sfId = '.' + sfId;
                }
                jq(sfId).modal('hide');
            }
        }

        /**
         * Resize DOM element when detect Mobile screen
         */
        reSize = function(elem, cls) {
            $window.resize(function resize() {
                if ($window.width() < 514) {
                    return jq(elem).addClass(cls);
                }
                jq(elem).removeClass(cls);
            }).trigger('resize');   
        }
        
        /**
         * DOM event loader
         */
        jq(document).ready(function() {
            //Dynamic active
            var $url = window.location.href.toLowerCase();
            if ($url.includes('contact')) {
                var $li = jq('ul.menu.list-inline > li.list-inline-item');
                for (var i=0; i<$li.length; i++) {
                    if ($li[i].innerText.toLowerCase().includes('contact')) {
                        jq($li[i]).children().css({
                            'color': '#7dabdb',
                            'text-decoration': 'underline'
                        });
                    }
                }
            }
            //tooltips
            var $placement = setPlacement();
            jq('#FirstName').tooltip({
                trigger: 'focus', 
                title: 'Digit a first name!',
                placement: $placement
            });

            jq('#LastName').tooltip({
                trigger: 'focus', 
                title: 'Enter a last name!',
                placement: $placement
            });

            jq('#Email').tooltip({
                trigger: 'focus', 
                title: 'Digit an email address!',
                placement: $placement
            });

            jq('#Phone').tooltip({
                trigger: 'focus', 
                title: 'Enter a phone number!',
                placement: $placement
            });

            jq('#Department').tooltip({
                trigger: 'focus',
                title: 'Enter a Department name!',
                placement: $placement
            });

            jq("[data-toggle=tooltip]").tooltip();
            
            //Resize the Save contact button
            reSize('#Save', 'btn-block');

            //Resize the table setting new responsive class
            reSize('table', 'table-responsive');

            //Hide pagination
            hidePagination('Page');
            
            //Animation for alert when clicking on close button
            jq("div.alert").on("click", "button.close", function() {
                jq(this).parent().animate({opacity: 0}, 500).hide('slow');
            });
        });
        
        function isEmpty(obj) {
            for(var prop in obj) {
                if(obj.hasOwnProperty(prop))
                return false;
            }
            return true;
        }

        function equals(obj1, obj2) {
            return JSON.stringify(obj1) === JSON.stringify(obj2) 
        }
    
    </script>
    </html> 
</apex:page>